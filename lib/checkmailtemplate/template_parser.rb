#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TemplateParser
  class Parser < Racc::Parser

module_eval(<<'...end template_parser.y/module_eval...', 'template_parser.y', 31)
  def initialize
    @template = {}
    @document = ''
  end

  def parse(str)
    @tokenizer = TemplateParser::Tokenizer.new(str)
    do_parse
    @template
  end

  def next_token
    @tokenizer.next
  end

  def on_error(t, v, values)
    line = 0
    token = ''
    line = v[0]  if v[0] != '$'
    token = v[1] if v[1]
    msg = check_require(line, token)
    raise Racc::ParseError, msg
  end

  def check_require(line, v)
    return sprintf(get_message(:BAD_TYPE_2), line, v) unless @template[:TYPE]
    return sprintf(get_message(:BAD_SUBJ_2), line, v) unless @template[:SUBJ]
    return sprintf(get_message(:BAD_FROM_2), line, v) unless @template[:FROM]
    return sprintf(get_message(:BAD_BODY_2), line, v) unless @template[:BODY]
    ''
  end
...end template_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,     8,    21,    22,    23,    24,    25,     6,    26,     8,
     9,    11,     8,    13,     4,    16,     3,    27,     8,    29,
    30,    32 ]

racc_action_check = [
    14,    11,    14,    14,    14,    14,    14,     2,    14,     3,
     4,     5,     6,     7,     1,    12,     0,    15,    19,    26,
    28,    31 ]

racc_action_pointer = [
    14,    14,     3,     0,    10,     6,     3,    10,   nil,   nil,
   nil,    -8,    12,   nil,    -2,    14,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,    17,   nil,
   nil,    10,   nil ]

racc_action_default = [
   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -14,    33,
    -5,   -18,   -18,    -2,   -18,   -18,    -3,    -1,    -6,   -18,
    -8,    -9,   -10,   -11,   -12,   -13,   -18,    -4,   -18,   -16,
    -7,   -15,   -17 ]

racc_goto_table = [
     7,    17,     5,    12,    10,    14,     2,     1,    15,    18,
    19,    31,   nil,   nil,   nil,   nil,    28 ]

racc_goto_check = [
     7,     6,     3,     7,     4,     5,     2,     1,     7,     8,
     9,    10,   nil,   nil,   nil,   nil,     7 ]

racc_goto_pointer = [
   nil,     7,     6,     0,    -1,    -5,   -13,    -3,    -5,    -4,
   -18 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 13, :_reduce_none,
  3, 14, :_reduce_2,
  3, 15, :_reduce_3,
  3, 16, :_reduce_4,
  0, 17, :_reduce_none,
  2, 17, :_reduce_none,
  3, 20, :_reduce_7,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 19, :_reduce_none,
  3, 18, :_reduce_15,
  0, 22, :_reduce_none,
  2, 22, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 33

racc_token_table = {
  false => 0,
  :error => 1,
  :TYPE => 2,
  :NL => 3,
  :SUBJ => 4,
  :FROM => 5,
  :TO => 6,
  :CC => 7,
  :BCC => 8,
  :VALUE => 9,
  :BODY => 10,
  :LINE => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TYPE",
  "NL",
  "SUBJ",
  "FROM",
  "TO",
  "CC",
  "BCC",
  "VALUE",
  "BODY",
  "LINE",
  "$start",
  "program",
  "type",
  "subj",
  "from",
  "adds",
  "body",
  "value",
  "add",
  "key",
  "document" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'template_parser.y', 8)
  def _reduce_2(val, _values, result)
     @template[:TYPE] = val[1][1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'template_parser.y', 10)
  def _reduce_3(val, _values, result)
     @template[:SUBJ] = val[1][1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'template_parser.y', 12)
  def _reduce_4(val, _values, result)
     @template[:FROM] = val[1][1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'template_parser.y', 17)
  def _reduce_7(val, _values, result)
                    k, v = [val[0][1].to_sym, v = val[1][1]]
                @template[k] = [] unless @template[k]
                @template[k] << v.strip
              
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'template_parser.y', 25)
  def _reduce_15(val, _values, result)
     @template[:BODY] = @document 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'template_parser.y', 28)
  def _reduce_17(val, _values, result)
     @document += val[1][1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TemplateParser
